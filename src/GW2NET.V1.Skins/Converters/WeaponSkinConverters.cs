//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GW2NET.V1.Skins.Converters
{
    using System;

    using GW2NET.Common;
    using GW2NET.Skins;
	using SkinDTO = GW2NET.V1.Skins.Json.SkinDTO;

    public sealed partial class WeaponSkinConverter : IConverter<SkinDTO, WeaponSkin>
	{
	    private readonly ITypeConverterFactory<SkinDTO, WeaponSkin> converterFactory;

		private WeaponSkinConverter(ITypeConverterFactory<SkinDTO, WeaponSkin> converterFactory)
		{
		    if (converterFactory == null)
    		{
    		    throw new ArgumentNullException("converterFactory");
    		}

		    this.converterFactory = converterFactory;
		}

		 /// <inheritdoc />
        WeaponSkin IConverter<SkinDTO, WeaponSkin>.Convert(SkinDTO value, object state)
		{
		    if (value == null)
    		{
    		    throw new ArgumentNullException("value");
    		}

			string discriminator = value.Weapon == null ? null : value.Weapon.Type;
			var converter = this.converterFactory.Create(discriminator);
			var entity = converter.Convert(value, value);
			this.Merge(entity, value, state);
			return entity;
		}

		// Implement this method in a buddy class to set properties that are specific to 'WeaponSkin' (if any)
    	partial void Merge(WeaponSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class WeaponSkinConverter
		{
		    partial void Merge(WeaponSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
	}

#region AxeSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="AxeSkin"/>.</summary>
    public sealed partial class AxeSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new AxeSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'AxeSkin' (if any)
    	partial void Merge(AxeSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class AxeSkinConverter
		{
		    partial void Merge(AxeSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region DaggerSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="DaggerSkin"/>.</summary>
    public sealed partial class DaggerSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new DaggerSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'DaggerSkin' (if any)
    	partial void Merge(DaggerSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class DaggerSkinConverter
		{
		    partial void Merge(DaggerSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region FocusSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="FocusSkin"/>.</summary>
    public sealed partial class FocusSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new FocusSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'FocusSkin' (if any)
    	partial void Merge(FocusSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class FocusSkinConverter
		{
		    partial void Merge(FocusSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region GreatSwordSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="GreatSwordSkin"/>.</summary>
    public sealed partial class GreatSwordSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new GreatSwordSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'GreatSwordSkin' (if any)
    	partial void Merge(GreatSwordSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class GreatSwordSkinConverter
		{
		    partial void Merge(GreatSwordSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region HammerSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="HammerSkin"/>.</summary>
    public sealed partial class HammerSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new HammerSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'HammerSkin' (if any)
    	partial void Merge(HammerSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class HammerSkinConverter
		{
		    partial void Merge(HammerSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region HarpoonSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="HarpoonSkin"/>.</summary>
    public sealed partial class HarpoonSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new HarpoonSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'HarpoonSkin' (if any)
    	partial void Merge(HarpoonSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class HarpoonSkinConverter
		{
		    partial void Merge(HarpoonSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region LargeBundleSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="LargeBundleSkin"/>.</summary>
    public sealed partial class LargeBundleSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new LargeBundleSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'LargeBundleSkin' (if any)
    	partial void Merge(LargeBundleSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class LargeBundleSkinConverter
		{
		    partial void Merge(LargeBundleSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region LongBowSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="LongBowSkin"/>.</summary>
    public sealed partial class LongBowSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new LongBowSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'LongBowSkin' (if any)
    	partial void Merge(LongBowSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class LongBowSkinConverter
		{
		    partial void Merge(LongBowSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region MaceSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="MaceSkin"/>.</summary>
    public sealed partial class MaceSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new MaceSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'MaceSkin' (if any)
    	partial void Merge(MaceSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class MaceSkinConverter
		{
		    partial void Merge(MaceSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region PistolSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="PistolSkin"/>.</summary>
    public sealed partial class PistolSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new PistolSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'PistolSkin' (if any)
    	partial void Merge(PistolSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class PistolSkinConverter
		{
		    partial void Merge(PistolSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region RifleSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="RifleSkin"/>.</summary>
    public sealed partial class RifleSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new RifleSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'RifleSkin' (if any)
    	partial void Merge(RifleSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class RifleSkinConverter
		{
		    partial void Merge(RifleSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region ScepterSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="ScepterSkin"/>.</summary>
    public sealed partial class ScepterSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new ScepterSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'ScepterSkin' (if any)
    	partial void Merge(ScepterSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class ScepterSkinConverter
		{
		    partial void Merge(ScepterSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region ShieldSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="ShieldSkin"/>.</summary>
    public sealed partial class ShieldSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new ShieldSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'ShieldSkin' (if any)
    	partial void Merge(ShieldSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class ShieldSkinConverter
		{
		    partial void Merge(ShieldSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region ShortBowSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="ShortBowSkin"/>.</summary>
    public sealed partial class ShortBowSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new ShortBowSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'ShortBowSkin' (if any)
    	partial void Merge(ShortBowSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class ShortBowSkinConverter
		{
		    partial void Merge(ShortBowSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region SmallBundleSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="SmallBundleSkin"/>.</summary>
    public sealed partial class SmallBundleSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new SmallBundleSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'SmallBundleSkin' (if any)
    	partial void Merge(SmallBundleSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class SmallBundleSkinConverter
		{
		    partial void Merge(SmallBundleSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region SpearGunSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="SpearGunSkin"/>.</summary>
    public sealed partial class SpearGunSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new SpearGunSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'SpearGunSkin' (if any)
    	partial void Merge(SpearGunSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class SpearGunSkinConverter
		{
		    partial void Merge(SpearGunSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region StaffSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="StaffSkin"/>.</summary>
    public sealed partial class StaffSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new StaffSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'StaffSkin' (if any)
    	partial void Merge(StaffSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class StaffSkinConverter
		{
		    partial void Merge(StaffSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region SwordSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="SwordSkin"/>.</summary>
    public sealed partial class SwordSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new SwordSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'SwordSkin' (if any)
    	partial void Merge(SwordSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class SwordSkinConverter
		{
		    partial void Merge(SwordSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region TorchSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="TorchSkin"/>.</summary>
    public sealed partial class TorchSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new TorchSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'TorchSkin' (if any)
    	partial void Merge(TorchSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class TorchSkinConverter
		{
		    partial void Merge(TorchSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region ToySkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="ToySkin"/>.</summary>
    public sealed partial class ToySkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new ToySkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'ToySkin' (if any)
    	partial void Merge(ToySkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class ToySkinConverter
		{
		    partial void Merge(ToySkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region TridentSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="TridentSkin"/>.</summary>
    public sealed partial class TridentSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new TridentSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'TridentSkin' (if any)
    	partial void Merge(TridentSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class TridentSkinConverter
		{
		    partial void Merge(TridentSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region TwoHandedToySkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="TwoHandedToySkin"/>.</summary>
    public sealed partial class TwoHandedToySkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new TwoHandedToySkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'TwoHandedToySkin' (if any)
    	partial void Merge(TwoHandedToySkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class TwoHandedToySkinConverter
		{
		    partial void Merge(TwoHandedToySkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region UnknownWeaponSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="UnknownWeaponSkin"/>.</summary>
    public sealed partial class UnknownWeaponSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new UnknownWeaponSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'UnknownWeaponSkin' (if any)
    	partial void Merge(UnknownWeaponSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class UnknownWeaponSkinConverter
		{
		    partial void Merge(UnknownWeaponSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region WarHornSkin
    /// <summary>Converts objects of type <see cref="SkinDTO"/> to objects of type <see cref="WarHornSkin"/>.</summary>
    public sealed partial class WarHornSkinConverter : IConverter<SkinDTO, WeaponSkin>
    {
	    /// <inheritdoc />
        public WeaponSkin Convert(SkinDTO value, object state)
        {
    		var entity = new WarHornSkin();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'WarHornSkin' (if any)
    	partial void Merge(WarHornSkin entity, SkinDTO dto, object state);

		/*
		// Use this template
		public partial class WarHornSkinConverter
		{
		    partial void Merge(WarHornSkin entity, SkinDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

}
