//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GW2NET.V1.Floors.Converters
{
    using System;

    using GW2NET.Common;
    using GW2NET.Maps;
	using PointOfInterestDTO = GW2NET.V1.Floors.Json.PointOfInterestDTO;

    public sealed partial class PointOfInterestConverter : IConverter<PointOfInterestDTO, PointOfInterest>
	{
	    private readonly ITypeConverterFactory<PointOfInterestDTO, PointOfInterest> converterFactory;

		private PointOfInterestConverter(ITypeConverterFactory<PointOfInterestDTO, PointOfInterest> converterFactory)
		{
		    if (converterFactory == null)
    		{
    		    throw new ArgumentNullException("converterFactory");
    		}

		    this.converterFactory = converterFactory;
		}

		 /// <inheritdoc />
        PointOfInterest IConverter<PointOfInterestDTO, PointOfInterest>.Convert(PointOfInterestDTO value, object state)
		{
		    if (value == null)
    		{
    		    throw new ArgumentNullException("value");
    		}

			string discriminator = value.Type;
			var converter = this.converterFactory.Create(discriminator);
			var entity = converter.Convert(value, value);
			this.Merge(entity, value, state);
			return entity;
		}

		// Implement this method in a buddy class to set properties that are specific to 'PointOfInterest' (if any)
    	partial void Merge(PointOfInterest entity, PointOfInterestDTO dto, object state);

		/*
		// Use this template
		public partial class PointOfInterestConverter
		{
		    partial void Merge(PointOfInterest entity, PointOfInterestDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
	}

#region Dungeon
    /// <summary>Converts objects of type <see cref="PointOfInterestDTO"/> to objects of type <see cref="Dungeon"/>.</summary>
    public sealed partial class DungeonConverter : IConverter<PointOfInterestDTO, PointOfInterest>
    {
	    /// <inheritdoc />
        public PointOfInterest Convert(PointOfInterestDTO value, object state)
        {
    		var entity = new Dungeon();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'Dungeon' (if any)
    	partial void Merge(Dungeon entity, PointOfInterestDTO dto, object state);

		/*
		// Use this template
		public partial class DungeonConverter
		{
		    partial void Merge(Dungeon entity, PointOfInterestDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region Landmark
    /// <summary>Converts objects of type <see cref="PointOfInterestDTO"/> to objects of type <see cref="Landmark"/>.</summary>
    public sealed partial class LandmarkConverter : IConverter<PointOfInterestDTO, PointOfInterest>
    {
	    /// <inheritdoc />
        public PointOfInterest Convert(PointOfInterestDTO value, object state)
        {
    		var entity = new Landmark();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'Landmark' (if any)
    	partial void Merge(Landmark entity, PointOfInterestDTO dto, object state);

		/*
		// Use this template
		public partial class LandmarkConverter
		{
		    partial void Merge(Landmark entity, PointOfInterestDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region UnknownPointOfInterest
    /// <summary>Converts objects of type <see cref="PointOfInterestDTO"/> to objects of type <see cref="UnknownPointOfInterest"/>.</summary>
    public sealed partial class UnknownPointOfInterestConverter : IConverter<PointOfInterestDTO, PointOfInterest>
    {
	    /// <inheritdoc />
        public PointOfInterest Convert(PointOfInterestDTO value, object state)
        {
    		var entity = new UnknownPointOfInterest();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'UnknownPointOfInterest' (if any)
    	partial void Merge(UnknownPointOfInterest entity, PointOfInterestDTO dto, object state);

		/*
		// Use this template
		public partial class UnknownPointOfInterestConverter
		{
		    partial void Merge(UnknownPointOfInterest entity, PointOfInterestDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region Vista
    /// <summary>Converts objects of type <see cref="PointOfInterestDTO"/> to objects of type <see cref="Vista"/>.</summary>
    public sealed partial class VistaConverter : IConverter<PointOfInterestDTO, PointOfInterest>
    {
	    /// <inheritdoc />
        public PointOfInterest Convert(PointOfInterestDTO value, object state)
        {
    		var entity = new Vista();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'Vista' (if any)
    	partial void Merge(Vista entity, PointOfInterestDTO dto, object state);

		/*
		// Use this template
		public partial class VistaConverter
		{
		    partial void Merge(Vista entity, PointOfInterestDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region Waypoint
    /// <summary>Converts objects of type <see cref="PointOfInterestDTO"/> to objects of type <see cref="Waypoint"/>.</summary>
    public sealed partial class WaypointConverter : IConverter<PointOfInterestDTO, PointOfInterest>
    {
	    /// <inheritdoc />
        public PointOfInterest Convert(PointOfInterestDTO value, object state)
        {
    		var entity = new Waypoint();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'Waypoint' (if any)
    	partial void Merge(Waypoint entity, PointOfInterestDTO dto, object state);

		/*
		// Use this template
		public partial class WaypointConverter
		{
		    partial void Merge(Waypoint entity, PointOfInterestDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

}
