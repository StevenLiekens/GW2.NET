//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GW2NET.V2.Items.Converters
{
    using System;

    using GW2NET.Common;
    using GW2NET.Items;
	using ItemDTO = GW2NET.V2.Items.Json.ItemDTO;

    public sealed partial class ContainerConverter : IConverter<ItemDTO, Container>
	{
	    private readonly ITypeConverterFactory<ItemDTO, Container> converterFactory;

		public ContainerConverter(ITypeConverterFactory<ItemDTO, Container> converterFactory)
		{
		    if (converterFactory == null)
    		{
    		    throw new ArgumentNullException("converterFactory");
    		}

		    this.converterFactory = converterFactory;
		}

		 /// <inheritdoc />
        Container IConverter<ItemDTO, Container>.Convert(ItemDTO value, object state)
		{
		    if (value == null)
    		{
    		    throw new ArgumentNullException("value");
    		}

			string discriminator = value.Details.Type;
			var converter = this.converterFactory.Create(discriminator);
			var entity = converter.Convert(value, value);
			this.Merge(entity, value, state);
			return entity;
		}

		// Implement this method in a buddy class to set properties that are specific to 'Container' (if any)
    	partial void Merge(Container entity, ItemDTO dto, object state);

		/*
		// Use this template
		public partial class ContainerConverter
		{
		    partial void Merge(Container entity, ItemDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
	}

#region DefaultContainer
    /// <summary>Converts objects of type <see cref="ItemDTO"/> to objects of type <see cref="DefaultContainer"/>.</summary>
    public sealed partial class DefaultContainerConverter : IConverter<ItemDTO, Container>
    {
	    /// <inheritdoc />
        public Container Convert(ItemDTO value, object state)
        {
    		var entity = new DefaultContainer();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'DefaultContainer' (if any)
    	partial void Merge(DefaultContainer entity, ItemDTO dto, object state);

		/*
		// Use this template
		public partial class DefaultContainerConverter
		{
		    partial void Merge(DefaultContainer entity, ItemDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region GiftBox
    /// <summary>Converts objects of type <see cref="ItemDTO"/> to objects of type <see cref="GiftBox"/>.</summary>
    public sealed partial class GiftBoxConverter : IConverter<ItemDTO, Container>
    {
	    /// <inheritdoc />
        public Container Convert(ItemDTO value, object state)
        {
    		var entity = new GiftBox();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'GiftBox' (if any)
    	partial void Merge(GiftBox entity, ItemDTO dto, object state);

		/*
		// Use this template
		public partial class GiftBoxConverter
		{
		    partial void Merge(GiftBox entity, ItemDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region OpenUiContainer
    /// <summary>Converts objects of type <see cref="ItemDTO"/> to objects of type <see cref="OpenUiContainer"/>.</summary>
    public sealed partial class OpenUiContainerConverter : IConverter<ItemDTO, Container>
    {
	    /// <inheritdoc />
        public Container Convert(ItemDTO value, object state)
        {
    		var entity = new OpenUiContainer();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'OpenUiContainer' (if any)
    	partial void Merge(OpenUiContainer entity, ItemDTO dto, object state);

		/*
		// Use this template
		public partial class OpenUiContainerConverter
		{
		    partial void Merge(OpenUiContainer entity, ItemDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region UnknownContainer
    /// <summary>Converts objects of type <see cref="ItemDTO"/> to objects of type <see cref="UnknownContainer"/>.</summary>
    public sealed partial class UnknownContainerConverter : IConverter<ItemDTO, Container>
    {
	    /// <inheritdoc />
        public Container Convert(ItemDTO value, object state)
        {
    		var entity = new UnknownContainer();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'UnknownContainer' (if any)
    	partial void Merge(UnknownContainer entity, ItemDTO dto, object state);

		/*
		// Use this template
		public partial class UnknownContainerConverter
		{
		    partial void Merge(UnknownContainer entity, ItemDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

}
