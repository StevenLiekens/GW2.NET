//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GW2NET.V1.Items.Converters
{
    using System;

    using GW2NET.Common;
    using GW2NET.Items;
	using ItemDTO = GW2NET.V1.Items.Json.ItemDTO;

    public sealed partial class GatheringToolConverter : IConverter<ItemDTO, GatheringTool>
	{
	    private readonly ITypeConverterFactory<ItemDTO, GatheringTool> converterFactory;

		public GatheringToolConverter(ITypeConverterFactory<ItemDTO, GatheringTool> converterFactory)
		{
		    if (converterFactory == null)
    		{
    		    throw new ArgumentNullException("converterFactory");
    		}

		    this.converterFactory = converterFactory;
		}

		 /// <inheritdoc />
        GatheringTool IConverter<ItemDTO, GatheringTool>.Convert(ItemDTO value, object state)
		{
		    if (value == null)
    		{
    		    throw new ArgumentNullException("value");
    		}

			string discriminator = value.GatheringTool == null ? null : value.GatheringTool.Type;
			var converter = this.converterFactory.Create(discriminator);
			var entity = converter.Convert(value, value);
			this.Merge(entity, value, state);
			return entity;
		}

		// Implement this method in a buddy class to set properties that are specific to 'GatheringTool' (if any)
    	partial void Merge(GatheringTool entity, ItemDTO dto, object state);

		/*
		// Use this template
		public partial class GatheringToolConverter
		{
		    partial void Merge(GatheringTool entity, ItemDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
	}

#region ForagingTool
    /// <summary>Converts objects of type <see cref="ItemDTO"/> to objects of type <see cref="ForagingTool"/>.</summary>
    public sealed partial class ForagingToolConverter : IConverter<ItemDTO, GatheringTool>
    {
	    /// <inheritdoc />
        public GatheringTool Convert(ItemDTO value, object state)
        {
    		var entity = new ForagingTool();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'ForagingTool' (if any)
    	partial void Merge(ForagingTool entity, ItemDTO dto, object state);

		/*
		// Use this template
		public partial class ForagingToolConverter
		{
		    partial void Merge(ForagingTool entity, ItemDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region LoggingTool
    /// <summary>Converts objects of type <see cref="ItemDTO"/> to objects of type <see cref="LoggingTool"/>.</summary>
    public sealed partial class LoggingToolConverter : IConverter<ItemDTO, GatheringTool>
    {
	    /// <inheritdoc />
        public GatheringTool Convert(ItemDTO value, object state)
        {
    		var entity = new LoggingTool();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'LoggingTool' (if any)
    	partial void Merge(LoggingTool entity, ItemDTO dto, object state);

		/*
		// Use this template
		public partial class LoggingToolConverter
		{
		    partial void Merge(LoggingTool entity, ItemDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region MiningTool
    /// <summary>Converts objects of type <see cref="ItemDTO"/> to objects of type <see cref="MiningTool"/>.</summary>
    public sealed partial class MiningToolConverter : IConverter<ItemDTO, GatheringTool>
    {
	    /// <inheritdoc />
        public GatheringTool Convert(ItemDTO value, object state)
        {
    		var entity = new MiningTool();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'MiningTool' (if any)
    	partial void Merge(MiningTool entity, ItemDTO dto, object state);

		/*
		// Use this template
		public partial class MiningToolConverter
		{
		    partial void Merge(MiningTool entity, ItemDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region UnknownGatheringTool
    /// <summary>Converts objects of type <see cref="ItemDTO"/> to objects of type <see cref="UnknownGatheringTool"/>.</summary>
    public sealed partial class UnknownGatheringToolConverter : IConverter<ItemDTO, GatheringTool>
    {
	    /// <inheritdoc />
        public GatheringTool Convert(ItemDTO value, object state)
        {
    		var entity = new UnknownGatheringTool();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'UnknownGatheringTool' (if any)
    	partial void Merge(UnknownGatheringTool entity, ItemDTO dto, object state);

		/*
		// Use this template
		public partial class UnknownGatheringToolConverter
		{
		    partial void Merge(UnknownGatheringTool entity, ItemDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

}
