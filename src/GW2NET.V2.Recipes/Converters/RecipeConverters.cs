//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GW2NET.V2.Recipes.Converters
{
    using System;

    using GW2NET.Common;
    using GW2NET.Recipes;
	using RecipeDTO = GW2NET.V2.Recipes.Json.RecipeDTO;

    public sealed partial class RecipeConverter : IConverter<RecipeDTO, Recipe>
	{
	    private readonly ITypeConverterFactory<RecipeDTO, Recipe> converterFactory;

		private RecipeConverter(ITypeConverterFactory<RecipeDTO, Recipe> converterFactory)
		{
		    if (converterFactory == null)
    		{
    		    throw new ArgumentNullException("converterFactory");
    		}

		    this.converterFactory = converterFactory;
		}

		 /// <inheritdoc />
        Recipe IConverter<RecipeDTO, Recipe>.Convert(RecipeDTO value, object state)
		{
		    if (value == null)
    		{
    		    throw new ArgumentNullException("value");
    		}

			string discriminator = value.Type;
			var converter = this.converterFactory.Create(discriminator);
			var entity = converter.Convert(value, value);
			this.Merge(entity, value, state);
			return entity;
		}

		// Implement this method in a buddy class to set properties that are specific to 'Recipe' (if any)
    	partial void Merge(Recipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class RecipeConverter
		{
		    partial void Merge(Recipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
	}

#region AmuletRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="AmuletRecipe"/>.</summary>
    public sealed partial class AmuletRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new AmuletRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'AmuletRecipe' (if any)
    	partial void Merge(AmuletRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class AmuletRecipeConverter
		{
		    partial void Merge(AmuletRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region AxeRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="AxeRecipe"/>.</summary>
    public sealed partial class AxeRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new AxeRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'AxeRecipe' (if any)
    	partial void Merge(AxeRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class AxeRecipeConverter
		{
		    partial void Merge(AxeRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region BackpackRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="BackpackRecipe"/>.</summary>
    public sealed partial class BackpackRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new BackpackRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'BackpackRecipe' (if any)
    	partial void Merge(BackpackRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class BackpackRecipeConverter
		{
		    partial void Merge(BackpackRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region BagRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="BagRecipe"/>.</summary>
    public sealed partial class BagRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new BagRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'BagRecipe' (if any)
    	partial void Merge(BagRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class BagRecipeConverter
		{
		    partial void Merge(BagRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region BootsRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="BootsRecipe"/>.</summary>
    public sealed partial class BootsRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new BootsRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'BootsRecipe' (if any)
    	partial void Merge(BootsRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class BootsRecipeConverter
		{
		    partial void Merge(BootsRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region BulkRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="BulkRecipe"/>.</summary>
    public sealed partial class BulkRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new BulkRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'BulkRecipe' (if any)
    	partial void Merge(BulkRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class BulkRecipeConverter
		{
		    partial void Merge(BulkRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region CoatRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="CoatRecipe"/>.</summary>
    public sealed partial class CoatRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new CoatRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'CoatRecipe' (if any)
    	partial void Merge(CoatRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class CoatRecipeConverter
		{
		    partial void Merge(CoatRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region ComponentRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="ComponentRecipe"/>.</summary>
    public sealed partial class ComponentRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new ComponentRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'ComponentRecipe' (if any)
    	partial void Merge(ComponentRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class ComponentRecipeConverter
		{
		    partial void Merge(ComponentRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region ConsumableRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="ConsumableRecipe"/>.</summary>
    public sealed partial class ConsumableRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new ConsumableRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'ConsumableRecipe' (if any)
    	partial void Merge(ConsumableRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class ConsumableRecipeConverter
		{
		    partial void Merge(ConsumableRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region DaggerRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="DaggerRecipe"/>.</summary>
    public sealed partial class DaggerRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new DaggerRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'DaggerRecipe' (if any)
    	partial void Merge(DaggerRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class DaggerRecipeConverter
		{
		    partial void Merge(DaggerRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region DessertRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="DessertRecipe"/>.</summary>
    public sealed partial class DessertRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new DessertRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'DessertRecipe' (if any)
    	partial void Merge(DessertRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class DessertRecipeConverter
		{
		    partial void Merge(DessertRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region DyeRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="DyeRecipe"/>.</summary>
    public sealed partial class DyeRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new DyeRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'DyeRecipe' (if any)
    	partial void Merge(DyeRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class DyeRecipeConverter
		{
		    partial void Merge(DyeRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region EarringRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="EarringRecipe"/>.</summary>
    public sealed partial class EarringRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new EarringRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'EarringRecipe' (if any)
    	partial void Merge(EarringRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class EarringRecipeConverter
		{
		    partial void Merge(EarringRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region FeastRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="FeastRecipe"/>.</summary>
    public sealed partial class FeastRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new FeastRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'FeastRecipe' (if any)
    	partial void Merge(FeastRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class FeastRecipeConverter
		{
		    partial void Merge(FeastRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region GuildConsumableWvw
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="GuildConsumableWvw"/>.</summary>
    public sealed partial class GuildConsumableWvwConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new GuildConsumableWvw();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'GuildConsumableWvw' (if any)
    	partial void Merge(GuildConsumableWvw entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class GuildConsumableWvwConverter
		{
		    partial void Merge(GuildConsumableWvw entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region FocusRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="FocusRecipe"/>.</summary>
    public sealed partial class FocusRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new FocusRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'FocusRecipe' (if any)
    	partial void Merge(FocusRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class FocusRecipeConverter
		{
		    partial void Merge(FocusRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region GlovesRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="GlovesRecipe"/>.</summary>
    public sealed partial class GlovesRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new GlovesRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'GlovesRecipe' (if any)
    	partial void Merge(GlovesRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class GlovesRecipeConverter
		{
		    partial void Merge(GlovesRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region LegendaryComponent
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="LegendaryComponent"/>.</summary>
    public sealed partial class LegendaryComponentConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new LegendaryComponent();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'LegendaryComponent' (if any)
    	partial void Merge(LegendaryComponent entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class LegendaryComponentConverter
		{
		    partial void Merge(LegendaryComponent entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region GreatSwordRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="GreatSwordRecipe"/>.</summary>
    public sealed partial class GreatSwordRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new GreatSwordRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'GreatSwordRecipe' (if any)
    	partial void Merge(GreatSwordRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class GreatSwordRecipeConverter
		{
		    partial void Merge(GreatSwordRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region HammerRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="HammerRecipe"/>.</summary>
    public sealed partial class HammerRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new HammerRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'HammerRecipe' (if any)
    	partial void Merge(HammerRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class HammerRecipeConverter
		{
		    partial void Merge(HammerRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region HarpoonRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="HarpoonRecipe"/>.</summary>
    public sealed partial class HarpoonRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new HarpoonRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'HarpoonRecipe' (if any)
    	partial void Merge(HarpoonRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class HarpoonRecipeConverter
		{
		    partial void Merge(HarpoonRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region HelmRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="HelmRecipe"/>.</summary>
    public sealed partial class HelmRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new HelmRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'HelmRecipe' (if any)
    	partial void Merge(HelmRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class HelmRecipeConverter
		{
		    partial void Merge(HelmRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region IngredientCookingRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="IngredientCookingRecipe"/>.</summary>
    public sealed partial class IngredientCookingRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new IngredientCookingRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'IngredientCookingRecipe' (if any)
    	partial void Merge(IngredientCookingRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class IngredientCookingRecipeConverter
		{
		    partial void Merge(IngredientCookingRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region InscriptionRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="InscriptionRecipe"/>.</summary>
    public sealed partial class InscriptionRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new InscriptionRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'InscriptionRecipe' (if any)
    	partial void Merge(InscriptionRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class InscriptionRecipeConverter
		{
		    partial void Merge(InscriptionRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region InsigniaRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="InsigniaRecipe"/>.</summary>
    public sealed partial class InsigniaRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new InsigniaRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'InsigniaRecipe' (if any)
    	partial void Merge(InsigniaRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class InsigniaRecipeConverter
		{
		    partial void Merge(InsigniaRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region LeggingsRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="LeggingsRecipe"/>.</summary>
    public sealed partial class LeggingsRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new LeggingsRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'LeggingsRecipe' (if any)
    	partial void Merge(LeggingsRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class LeggingsRecipeConverter
		{
		    partial void Merge(LeggingsRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region LongBowRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="LongBowRecipe"/>.</summary>
    public sealed partial class LongBowRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new LongBowRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'LongBowRecipe' (if any)
    	partial void Merge(LongBowRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class LongBowRecipeConverter
		{
		    partial void Merge(LongBowRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region MaceRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="MaceRecipe"/>.</summary>
    public sealed partial class MaceRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new MaceRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'MaceRecipe' (if any)
    	partial void Merge(MaceRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class MaceRecipeConverter
		{
		    partial void Merge(MaceRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region MealRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="MealRecipe"/>.</summary>
    public sealed partial class MealRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new MealRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'MealRecipe' (if any)
    	partial void Merge(MealRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class MealRecipeConverter
		{
		    partial void Merge(MealRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region PistolRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="PistolRecipe"/>.</summary>
    public sealed partial class PistolRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new PistolRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'PistolRecipe' (if any)
    	partial void Merge(PistolRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class PistolRecipeConverter
		{
		    partial void Merge(PistolRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region PotionRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="PotionRecipe"/>.</summary>
    public sealed partial class PotionRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new PotionRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'PotionRecipe' (if any)
    	partial void Merge(PotionRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class PotionRecipeConverter
		{
		    partial void Merge(PotionRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region RefinementEctoplasmRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="RefinementEctoplasmRecipe"/>.</summary>
    public sealed partial class RefinementEctoplasmRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new RefinementEctoplasmRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'RefinementEctoplasmRecipe' (if any)
    	partial void Merge(RefinementEctoplasmRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class RefinementEctoplasmRecipeConverter
		{
		    partial void Merge(RefinementEctoplasmRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region RefinementObsidianRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="RefinementObsidianRecipe"/>.</summary>
    public sealed partial class RefinementObsidianRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new RefinementObsidianRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'RefinementObsidianRecipe' (if any)
    	partial void Merge(RefinementObsidianRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class RefinementObsidianRecipeConverter
		{
		    partial void Merge(RefinementObsidianRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region RefinementRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="RefinementRecipe"/>.</summary>
    public sealed partial class RefinementRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new RefinementRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'RefinementRecipe' (if any)
    	partial void Merge(RefinementRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class RefinementRecipeConverter
		{
		    partial void Merge(RefinementRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region RifleRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="RifleRecipe"/>.</summary>
    public sealed partial class RifleRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new RifleRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'RifleRecipe' (if any)
    	partial void Merge(RifleRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class RifleRecipeConverter
		{
		    partial void Merge(RifleRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region RingRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="RingRecipe"/>.</summary>
    public sealed partial class RingRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new RingRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'RingRecipe' (if any)
    	partial void Merge(RingRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class RingRecipeConverter
		{
		    partial void Merge(RingRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region ScepterRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="ScepterRecipe"/>.</summary>
    public sealed partial class ScepterRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new ScepterRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'ScepterRecipe' (if any)
    	partial void Merge(ScepterRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class ScepterRecipeConverter
		{
		    partial void Merge(ScepterRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region SeasoningRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="SeasoningRecipe"/>.</summary>
    public sealed partial class SeasoningRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new SeasoningRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'SeasoningRecipe' (if any)
    	partial void Merge(SeasoningRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class SeasoningRecipeConverter
		{
		    partial void Merge(SeasoningRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region ShieldRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="ShieldRecipe"/>.</summary>
    public sealed partial class ShieldRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new ShieldRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'ShieldRecipe' (if any)
    	partial void Merge(ShieldRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class ShieldRecipeConverter
		{
		    partial void Merge(ShieldRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region ShortBowRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="ShortBowRecipe"/>.</summary>
    public sealed partial class ShortBowRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new ShortBowRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'ShortBowRecipe' (if any)
    	partial void Merge(ShortBowRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class ShortBowRecipeConverter
		{
		    partial void Merge(ShortBowRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region ShouldersRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="ShouldersRecipe"/>.</summary>
    public sealed partial class ShouldersRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new ShouldersRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'ShouldersRecipe' (if any)
    	partial void Merge(ShouldersRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class ShouldersRecipeConverter
		{
		    partial void Merge(ShouldersRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region SnackRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="SnackRecipe"/>.</summary>
    public sealed partial class SnackRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new SnackRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'SnackRecipe' (if any)
    	partial void Merge(SnackRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class SnackRecipeConverter
		{
		    partial void Merge(SnackRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region SoupRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="SoupRecipe"/>.</summary>
    public sealed partial class SoupRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new SoupRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'SoupRecipe' (if any)
    	partial void Merge(SoupRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class SoupRecipeConverter
		{
		    partial void Merge(SoupRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region SpearGunRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="SpearGunRecipe"/>.</summary>
    public sealed partial class SpearGunRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new SpearGunRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'SpearGunRecipe' (if any)
    	partial void Merge(SpearGunRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class SpearGunRecipeConverter
		{
		    partial void Merge(SpearGunRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region StaffRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="StaffRecipe"/>.</summary>
    public sealed partial class StaffRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new StaffRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'StaffRecipe' (if any)
    	partial void Merge(StaffRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class StaffRecipeConverter
		{
		    partial void Merge(StaffRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region SwordRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="SwordRecipe"/>.</summary>
    public sealed partial class SwordRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new SwordRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'SwordRecipe' (if any)
    	partial void Merge(SwordRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class SwordRecipeConverter
		{
		    partial void Merge(SwordRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region TorchRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="TorchRecipe"/>.</summary>
    public sealed partial class TorchRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new TorchRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'TorchRecipe' (if any)
    	partial void Merge(TorchRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class TorchRecipeConverter
		{
		    partial void Merge(TorchRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region TridentRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="TridentRecipe"/>.</summary>
    public sealed partial class TridentRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new TridentRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'TridentRecipe' (if any)
    	partial void Merge(TridentRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class TridentRecipeConverter
		{
		    partial void Merge(TridentRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region UnknownRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="UnknownRecipe"/>.</summary>
    public sealed partial class UnknownRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new UnknownRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'UnknownRecipe' (if any)
    	partial void Merge(UnknownRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class UnknownRecipeConverter
		{
		    partial void Merge(UnknownRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region UpgradeComponentRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="UpgradeComponentRecipe"/>.</summary>
    public sealed partial class UpgradeComponentRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new UpgradeComponentRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'UpgradeComponentRecipe' (if any)
    	partial void Merge(UpgradeComponentRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class UpgradeComponentRecipeConverter
		{
		    partial void Merge(UpgradeComponentRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region WarHornRecipe
    /// <summary>Converts objects of type <see cref="RecipeDTO"/> to objects of type <see cref="WarHornRecipe"/>.</summary>
    public sealed partial class WarHornRecipeConverter : IConverter<RecipeDTO, Recipe>
    {
	    /// <inheritdoc />
        public Recipe Convert(RecipeDTO value, object state)
        {
    		var entity = new WarHornRecipe();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'WarHornRecipe' (if any)
    	partial void Merge(WarHornRecipe entity, RecipeDTO dto, object state);

		/*
		// Use this template
		public partial class WarHornRecipeConverter
		{
		    partial void Merge(WarHornRecipe entity, RecipeDTO dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

}
